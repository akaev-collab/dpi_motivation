import streamlit as st
import dpi_module as dpi
import datetime as dt
from dateutil import relativedelta
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
import hmac

st.set_page_config(layout="wide")

def check_password():
    """Returns `True` if the user had the correct password."""

    def password_entered():
        """Checks whether a password entered by the user is correct."""
        if hmac.compare_digest(st.session_state["password"], st.secrets["password"]):
            st.session_state["password_correct"] = True
            del st.session_state["password"]  # Don't store the password.
        else:
            st.session_state["password_correct"] = False

    # Return True if the password is validated.
    if st.session_state.get("password_correct", False):
        return True

    # Show input for password.
    st.text_input(
        "–ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞", type="password", on_change=password_entered, key="password"
    )
    if "password_correct" in st.session_state:
        st.error("üòï Password incorrect")
    return False

if not check_password():
    st.stop()  # Do not continue if check_password is not True.



@st.cache_data
def load_data(file_name, sheet_name):
    
    data = pd.read_excel(file_name, sheet_name)
    
    return data


file_name = "data_file/data_02.2024.xlsx"
df_load = load_data(file_name, "P_RD")
df_izm = load_data(file_name, "IZM")
df_productivity = load_data(file_name, "Productivity")

# –í—ã–¥–∞—á–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
def load_status(data, departament_filter, master_filter, group_filter, start_period, end_period):
    
    data = data[(data["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"] == departament_filter) & (data["–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è"] == master_filter) & (data["–ì—Ä—É–ø–ø–∞"] == group_filter) &\
                ((data["–°—Ä–æ–∫ –≤—ã–¥–∞—á–∏ (—Ñ–∞–∫—Ç)"] >= pd.to_datetime(str(start_period))) & (data["–°—Ä–æ–∫ –≤—ã–¥–∞—á–∏ (—Ñ–∞–∫—Ç)"] <= pd.to_datetime(str(end_period))))]
    
    
    num_sheet = data["–ö–æ–ª-–≤–æ –ª–∏—Å—Ç–æ–≤"].sum()
    load_df = data.groupby("–°—Ç–∞—Ç—É—Å –ø–æ –≤—ã–¥–∞—á–µ", as_index = False).aggregate({"–ö–æ–ª-–≤–æ –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ (—Ñ–∞–∫—Ç)":"sum"})
    
    time_load      = load_df[load_df["–°—Ç–∞—Ç—É—Å –ø–æ –≤—ã–¥–∞—á–µ"] == "–≤ —Å—Ä–æ–∫"]["–ö–æ–ª-–≤–æ –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ (—Ñ–∞–∫—Ç)"].sum()
    time_less_load = load_df[load_df["–°—Ç–∞—Ç—É—Å –ø–æ –≤—ã–¥–∞—á–µ"] == "—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (<14 –¥–Ω–µ–π)"]["–ö–æ–ª-–≤–æ –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ (—Ñ–∞–∫—Ç)"].sum()
    time_more_load = load_df[load_df["–°—Ç–∞—Ç—É—Å –ø–æ –≤—ã–¥–∞—á–µ"] == "—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (>14 –¥–Ω–µ–π)"]["–ö–æ–ª-–≤–æ –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ (—Ñ–∞–∫—Ç)"].sum()
    
    percent_load = (time_load / (load_df["–ö–æ–ª-–≤–æ –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ (—Ñ–∞–∫—Ç)"].sum()))
    
    if len(load_df) == 0:
        percent_load = 0
    else:
        if time_more_load != 0 or percent_load < 0.8:
            prize_to_load = 0
        elif percent_load >= 0.8 and percent_load < 1:
            prize_to_load = percent_load
        elif percent_load == 1:
            prize_to_load = 0.35

    return prize_to_load, num_sheet
    
# –ö–∞—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
def izm_status(data, departament_filter, master_filter, group_filter, start_period, end_period, num_sheet):

    data = data[(data["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"] == departament_filter) & (data["–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è"] == master_filter) & (data["–ì—Ä—É–ø–ø–∞"] == group_filter) &\
                ((data["–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Ñ–∞–∫—Ç)"] >= pd.to_datetime(str(start_period))) & (data["–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Ñ–∞–∫—Ç)"] <= pd.to_datetime(str(end_period))))]

    num_sheet_izm = data["–ö–æ–ª-–≤–æ –ª–∏—Å—Ç–æ–≤ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º"].sum()
    
    percent = num_sheet_izm/num_sheet
    
    if percent == 0:
        prize_to_izm = 1.2
    elif percent >= 0.000001 and percent <= 0.000299:
        prize_to_izm = 1.0
    else:
        prize_to_izm = 0
    
    return prize_to_izm

# –í—ã—Ä–∞–±–æ—Ç–∫–∞
def productivity_status(data, departament_filter, master_filter, group_filter, start_period, end_period):
    
    data = data[(data["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"] == departament_filter) & (data["–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è"] == master_filter) & (data["–ì—Ä—É–ø–ø–∞"] == group_filter) &\
                ((data["–î–∞—Ç–∞"] >= pd.to_datetime(str(start_period))) & (data["–î–∞—Ç–∞"] <= pd.to_datetime(str(end_period))))]
    
    productivity_plan = data[data["–ü–ª–∞–Ω/–§–∞–∫—Ç"] == "–ü–ª–∞–Ω"]["–ó–Ω–∞—á–µ–Ω–∏–µ"].sum()
    productivity_fact = data[data["–ü–ª–∞–Ω/–§–∞–∫—Ç"] == "–§–∞–∫—Ç"]["–ó–Ω–∞—á–µ–Ω–∏–µ"].sum()
    percent_productivity = (productivity_fact / productivity_plan)

    if len(data) == 0:
        prize_to_productivity = 0
    else:
        if percent_productivity < 0.7:
            prize_to_productivity = 0
        elif percent_productivity >= 0.7 and percent_productivity <= 1.2:
            prize_to_productivity = percent_productivity
        elif percent_productivity > 1.2:
            prize_to_productivity = 1.2

    return prize_to_productivity

def setting_set(number_of_periods):
    
    total_salary = []
    total_prize_for_period = []
    total_bonus = []
    
    data_salary_total = []


    for i in range(number_of_periods):
        
        st.markdown(f"## {i + 1}-–π –ø–µ—Ä–∏–æ–¥")
        data_box = st.columns((3, 6, 6), gap = "medium")
        data_salary = []

        with data_box[0]:
            department = st.selectbox(f"–£–∫–∞–∂–∏—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è {i+1}-–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞–±–æ—Ç—ã", structure.keys(),  placeholder = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
            master = st.selectbox(f"–£–∫–∞–∂–∏—Ç–µ –º–∞—Å—Ç–µ—Ä—Å–∫—É—é –¥–ª—è {i+1}-–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞–±–æ—Ç—ã", structure[department]["Studio"].keys(), placeholder = "–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è")
            group = st.selectbox(f"–£–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è {i+1}-–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞–±–æ—Ç—ã", structure[department]["Studio"][master]["Group"])
            position = st.selectbox(f"–£–∫–∞–∂–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è {i+1}-–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞–±–æ—Ç—ã", structure[department]["Position"])
            greid = st.selectbox(f"–£–∫–∞–∂–∏—Ç–µ –≥—Ä–µ–π–¥ –¥–ª—è {i+1}-–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞–±–æ—Ç—ã", greid_level.keys())
            start_period = st.date_input(f"–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –¥–ª—è {i+1}-–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞–±–æ—Ç—ã", dt.datetime(2023,1,1), format="DD.MM.YYYY")
            end_period = st.date_input(f"–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –¥–ª—è {i+1}-–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞–±–æ—Ç—ã", dt.datetime(2023,12,31), format="DD.MM.YYYY")
            salary= st.number_input(f"–£–∫–∞–∂–∏—Ç–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã –¥–ª—è {i+1}-–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞–±–æ—Ç—ã", value=100000, placeholder="–ó–∞—Ä–ø–ª–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö")

        delta = end_period - start_period
        salary_for_period = round((salary / 29.3) * (delta.days + 1))
        salary_to_greid_level = round(greid_level[greid] * salary_for_period)
        
        id_department = structure[department]["ID"]
        
        prize_to_load, num_sheet = load_status(df_load, id_department, master, group, start_period, end_period)
        prize_to_izm = izm_status(df_izm, id_department, master, group, start_period, end_period, num_sheet)
        prize_to_productivity = productivity_status(df_productivity, id_department, master, group, start_period, end_period)

        salary_to_load = round(prize_to_load * salary_to_greid_level * 0.35)
        salary_to_izm = round(prize_to_izm * salary_to_greid_level * 0.35)
        salary_to_productivity = round(prize_to_productivity * salary_to_greid_level * 0.2)
        
        #data_salary.append(salary_for_period)
        
        total = salary_to_load + salary_to_izm + salary_to_productivity
        
        data_salary.append(total)
        data_salary.append(salary_to_load)
        data_salary.append(salary_to_izm)
        data_salary.append(salary_to_productivity)
        data_salary.append(salary_to_greid_level)
        
        #total = round(np.sum(data_salary[1:]))
                
        waterfall_salary = go.Figure()

        waterfall_salary.add_trace(go.Waterfall(
            name = "–ü—Ä–µ–º–∏—è", 
            orientation = "h",
            measure = ["relative", "relative", "relative", "relative", "total"],
            x = data_salary,
            textposition = "inside",
            y = [ "–ò—Ç–æ–≥–æ –ø—Ä–µ–º–∏—è", "–í—ã–¥–∞—á–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏", "–ö–∞—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏", "–í—ã—Ä–∞–±–æ—Ç–∫–∞", "–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ (c —É—á–µ—Ç–æ–º –≥—Ä–µ–π–¥–∞)"],
            text = data_salary,
            connector = {"mode":"between","line":{"width":0.5, "color":"rgb(255, 255, 255)", "dash":"solid"}},
            textfont=dict(size=16)))
        
        waterfall_salary.update_layout(
            width=700,
            height=700,
            showlegend = True)
        
        data_salary_pie = data_salary[1:4] 
        labels = ["–í—ã–¥–∞—á–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏", "–ö–∞—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏", "–í—ã—Ä–∞–±–æ—Ç–∫–∞"]

        salary_pie = go.Figure(data = [go.Pie(labels = labels, values = data_salary_pie, hole = 0.5, pull = [0.02, 0.02, 0.02])])
        salary_pie.update_layout(
            width=800,
            height=700,
            legend=dict(orientation='h', y=1.2, yanchor='top', x=0.5, xanchor='center'))
        
        with data_box[1]:
            st.markdown("## –°–æ—Å—Ç–∞–≤ –ø—Ä–µ–º–∏–∏")
            st.plotly_chart(salary_pie)

        with data_box[2]:
            st.markdown("## –†–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–∏")       
            st.plotly_chart(waterfall_salary)
            #st.write(data_salary)

st.subheader("–£–∫–∞–∂–∏—Ç–µ –±—ã–ª –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –∑–∞ –æ—Ç—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")

path_to_json = "Structure"
structure_json = "structure.json"
greid_level_json = "greid_level.json"

structure = dpi.load_structure_data(path_to_json, structure_json)
greid_level  = dpi.load_structure_data(path_to_json, greid_level_json)

on = st.toggle("–£–∫–∞–∂–∏—Ç–µ –±—ã–ª –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –∑–∞ –æ—Ç—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")

if on:
    number_of_periods = st.slider('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤', min_value=0, max_value=5, value=0) 
    setting_set(number_of_periods+1)   
else:
    setting_set(1)